variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
# setup dynamic variables
default:
  image: docker:latest
  cache:
    paths:
      - client/node_modules/
  before_script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - export ENVIRONMENT_HOST=$(echo "$CI_ENVIRONMENT_URL" | sed -e 's|^[^/]*//||')
    - export APPLICATION_DIRECTORY=${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
    # export variables to .env
    #- chmod +x ./setup-env.sh
    #- ./setup-env.sh

stages:
  - test
  - build
  - review
  - staging
  - deploy


# testing not setup

.test: &test_template
  services:
    - redis:alpine
  stage: test
  except:
    variables:
      - $TEST_DISABLED

test:
  <<: *test_template
  script:
    - npm install
    - npm install --only=dev
    - npm test

test_echo:
  <<: *test_template
  script:
    - echo "$CI_DEFAULT_BRANCH"

.build:
  stage: build
  image:
    name: docker:stable
  services:
    - docker:stable-dind
  script:
    - cd "./${BUILD_DIR}"
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - >
      docker image pull "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:${CI_COMMIT_BEFORE_SHA}" ||
      true
    - >
      docker image pull "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:latest" ||
      true
    - >
      docker image pull "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:edge" ||
      true
    - >
      docker build
      --cache-from "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:${CI_COMMIT_BEFORE_SHA}"
      --cache-from "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:latest"
      --cache-from "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:edge"
      -t "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:latest"
      -t "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:${CI_APPLICATION_TAG}"
      -t "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:edge"
      --build-arg REACT_APP_API_URI
      --build-arg REACT_APP_BASE_DOMAIN
      .
    - test ! -z "${CI_COMMIT_TAG}" && docker push "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:latest"
    - docker push "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:${CI_APPLICATION_TAG}"
    - docker push "${CI_APPLICATION_REPOSITORY}-${BUILD_NAME}:edge"

build-frontend:
  extends: .build
  variables:
    BUILD_DIR: "client"
    BUILD_NAME: "frontend"

build-api:
  extends: .build
  variables:
    BUILD_DIR: "go-server"
    BUILD_NAME: "api"

review:
  stage: review
  extends: .deploy
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    url: http://review-${CI_COMMIT_REF_SLUG}.${BASE_DOMAIN}
    on_stop: stop_review
  only:
    refs:
      - branches
    variables:
      - $REVIEW_ENABLED == "true"
  except:
    refs:
      - master
      - tags

stop_review:
  stage: review
  extends: .stop_deploy
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  only:
    refs:
      - branches
    variables:
      - $REVIEW_ENABLED == "true"
  except:
    refs:
      - master
      - tags

staging:
  stage: staging
  extends: .deploy
  environment:
    name: staging
    url: https://$REACT_APP_BASE_DOMAIN
  only:
    refs:
      - master
    variables:
      - $STAGING_ENABLED == "true"

production:
  stage: deploy
  extends: .deploy
  environment:
    name: production
    url: https://$REACT_APP_BASE_DOMAIN
  allow_failure: false
  when: manual
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker image pull "${CI_APPLICATION_REPOSITORY}-frontend:edge"
    - docker image pull "${CI_APPLICATION_REPOSITORY}-api:edge"
    - docker tag "${CI_APPLICATION_REPOSITORY}-frontend:edge" "${CI_APPLICATION_REPOSITORY}-frontend:stable"
    - docker tag "${CI_APPLICATION_REPOSITORY}-api:edge" "${CI_APPLICATION_REPOSITORY}-api:stable"
    - docker push "${CI_APPLICATION_REPOSITORY}-frontend:stable"
    - docker push "${CI_APPLICATION_REPOSITORY}-api:stable"
  only:
    refs:
      - master
    variables:
      - $PRODUCTION_ENABLED == "true"

.deploy:
  image: registry.maxtroughear.dev/max.troughear/docker-images/alpine-curl
  after_script:
    - echo "Updating API Service"
    - curl -X POST ${SERVICE_WEBHOOK_API}
    - echo "Updating Frontend Service"
    - curl -X POST ${SERVICE_WEBHOOK_FRONTEND}
    - exit 0

.stop_deploy:
  image: kroniak/ssh-client
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${SERVER_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H ${SERVER_IP} >> ~/.ssh/known_hosts
    - >
      ssh ${SERVER_USER}@${SERVER_IP} "cd ${APPLICATION_DIRECTORY}/;
      docker-compose -f docker-compose.yml -f docker-compose.prod.yml down || true"
