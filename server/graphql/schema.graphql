type Query {
	userLogin(code: String!, username: String!, password: String!, twoFactor: String): AuthData!
  serviceAdminLogin(username: String!, password: String!, twoFactor: String): ServiceAdminData!
  twoFactorQR(secret: String!): String!
}

type Mutation {
	createUser(code: String!, username: String!, password: String!): User
	createCompany(name: String!, code: String!): Company
  enableTwoFactor(secret: String!, token: String!): Boolean!
  disableTwoFactor(password: String!): Boolean!
}

type User {
	company: Company!
	username: String!
}

type Company {
	name: String!
	code: String!
}

type ServiceAdmin {
  username: String!
}

type AuthData {
  user: User
	token: String
	tokenExpiration: Int
  twoFactorEnabled: Boolean!
}

type ServiceAdminData {
  serviceAdmin: ServiceAdmin
  token: String
  tokenExpiration: Int
  twoFactorEnabled: Boolean!
}

input UserInput {
	companyCode: String!
	username: String!
}